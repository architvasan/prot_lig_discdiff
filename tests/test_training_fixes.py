#!/usr/bin/env python3
"""
Test script to verify that the training fixes work correctly.
"""

import sys
import torch
from pathlib import Path

# Add project root to path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

def test_sampling_with_real_components():
    """Test sampling with real graph and noise components."""
    print("üß™ Testing sampling with real components...")
    
    try:
        # Import real components
        import protlig_ddiff.processing.graph_lib as graph_lib
        import protlig_ddiff.processing.noise_lib as noise_lib
        from protlig_ddiff.sampling.protein_sampling import sample_during_training
        
        # Create real components
        vocab_size = 26
        graph = graph_lib.Absorbing(vocab_size - 1)
        noise = noise_lib.LogLinearNoise()
        
        # Create a simple mock model
        class MockModel:
            def eval(self): pass
            def __call__(self, x, sigma, use_subs=True):
                batch_size, seq_len = x.shape
                vocab_size = 26
                return torch.randn(batch_size, seq_len, vocab_size)
        
        # Create config
        class MockConfig:
            def __init__(self):
                self.sampling = MockSamplingConfig()
        
        class MockSamplingConfig:
            def __init__(self):
                self.eval_batch_size = 2
                self.eval_max_length = 64
                self.eval_steps = 10
                self.predictor = 'analytic'
        
        model = MockModel()
        config = MockConfig()
        
        print("üîç Testing sampling with real graph and noise...")
        sequences = sample_during_training(
            model=model,
            graph=graph,
            noise=noise,
            config=config,
            step=100,
            device='cpu'
        )
        
        if sequences is not None and len(sequences) > 0:
            print(f"‚úÖ Sampling successful! Generated {len(sequences)} sequences")
            for i, seq in enumerate(sequences[:2]):
                print(f"   Sample {i+1}: {seq[:50]}...")
            return True
        else:
            print(f"‚ö†Ô∏è  Sampling returned: {sequences}")
            return False
        
    except Exception as e:
        print(f"‚ùå Sampling test failed: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_config_sampling_interval():
    """Test that the config sampling interval is read correctly."""
    print("üß™ Testing config sampling interval...")
    
    try:
        import yaml
        
        # Load the config
        config_path = "configs/config_protein.yaml"
        with open(config_path, 'r') as f:
            config_dict = yaml.safe_load(f)
        
        sampling_config = config_dict.get('sampling', {})
        sample_interval = sampling_config.get('sample_interval', 100)
        
        print(f"‚úÖ Sample interval from config: {sample_interval}")
        
        # Test the logic that would be used in training
        test_steps = [99, 100, 101, 200, 300]
        for step in test_steps:
            should_sample = (step % sample_interval == 0)
            print(f"   Step {step}: {'SAMPLE' if should_sample else 'skip'}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Config test failed: {e}")
        return False

def test_progress_bar_logic():
    """Test the progress bar update logic."""
    print("üß™ Testing progress bar update logic...")
    
    try:
        from tqdm import tqdm
        
        # Simulate the training loop logic
        data = range(5)
        pbar = tqdm(data, desc="Test Training")
        
        accumulate_grad_batches = 2
        accumulation_step = 0
        current_step = 0
        
        for batch_idx in pbar:
            # Simulate training step
            loss = 1.0 / (batch_idx + 1)
            accuracy = batch_idx / 5.0
            perplexity = 10.0 / (batch_idx + 1)
            
            # Simulate accumulation logic
            accumulation_step += 1
            
            if accumulation_step >= accumulate_grad_batches:
                # This is where we would do the optimization step
                current_step += 1
                accumulation_step = 0
                grad_norm = 0.1
            else:
                grad_norm = 0.0
            
            # Update progress bar (this should happen every batch)
            postfix_dict = {
                'loss': f"{loss:.4f}",
                'acc': f"{accuracy:.3f}",
                'ppl': f"{perplexity:.2f}",
                'step': current_step
            }
            
            if accumulate_grad_batches > 1:
                postfix_dict['acc_step'] = f"{accumulation_step}/{accumulate_grad_batches}"
            
            pbar.set_postfix(postfix_dict)
        
        print("‚úÖ Progress bar logic test completed")
        return True
        
    except Exception as e:
        print(f"‚ùå Progress bar test failed: {e}")
        return False

def test_file_output_setup():
    """Test the file output setup."""
    print("üß™ Testing file output setup...")
    
    try:
        import tempfile
        import os
        from datetime import datetime
        
        # Create a temporary work directory
        with tempfile.TemporaryDirectory() as temp_dir:
            # Simulate the file setup logic
            sampling_dir = Path(temp_dir) / "sampling"
            sampling_dir.mkdir(parents=True, exist_ok=True)
            
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            sampling_file = sampling_dir / f"sampled_sequences_{timestamp}.txt"
            
            # Write header
            with open(sampling_file, 'w') as f:
                f.write("# Sampled Protein Sequences During Training\n")
                f.write("# Format: STEP\tEPOCH\tSEQUENCE_ID\tSEQUENCE\n")
                f.write("# Generated on: {}\n".format(datetime.now().strftime("%Y-%m-%d %H:%M:%S")))
                f.write("\n")
            
            # Test writing sequences
            test_sequences = ["ACDEFGHIKLMNPQRSTVWY", "MKTAYIAKQRQISFVKSHFSRQLEERLGLIEVQAPILSRVGDGTQDNLSGAEKAVQVKVKALPDAQFEVVHSLAKWKRQTLGQHDFSAGEGLYTHMKALRPDEDRLSPLHSVYVDQWDWERVMGDGERQFSTLKSTVEAIWAGIKATEAAVSEEFGLAPFLPDQIHFVHSQELLSRYPDLDAKGRERAIAKDLGAVFLVGIGGKLSDGHRHDVRAPDYDDWUTRPKAAYAAQGFQAA"]
            
            for i, seq in enumerate(test_sequences):
                step = (i + 1) * 100
                epoch = i + 1
                with open(sampling_file, 'a') as f:
                    f.write(f"{step}\t{epoch}\t{i+1}\t{seq}\n")
            
            # Verify file contents
            with open(sampling_file, 'r') as f:
                content = f.read()
            
            print(f"‚úÖ File output test completed")
            print(f"   File created: {sampling_file}")
            print(f"   Content length: {len(content)} characters")
            print(f"   Lines: {len(content.splitlines())}")
            
            return True
        
    except Exception as e:
        print(f"‚ùå File output test failed: {e}")
        return False

def main():
    """Run all tests."""
    print("üîç Running training fixes tests...\n")
    
    tests = [
        test_config_sampling_interval,
        test_progress_bar_logic,
        test_file_output_setup,
        test_sampling_with_real_components,
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        try:
            if test():
                passed += 1
                print("‚úÖ PASSED\n")
            else:
                print("‚ùå FAILED\n")
        except Exception as e:
            print(f"‚ùå FAILED with exception: {e}\n")
    
    print(f"üìä Test Results: {passed}/{total} tests passed")
    
    if passed == total:
        print("üéâ All tests passed!")
        print("\nüí° Summary of fixes:")
        print("   1. ‚úÖ Fixed tokenizer attribute error (token_to_id ‚Üí vocab)")
        print("   2. ‚úÖ Fixed progress bar update logic")
        print("   3. ‚úÖ Fixed step counter increment timing")
        print("   4. ‚úÖ Added configurable sampling interval")
        print("   5. ‚úÖ Added sequence file output with step/epoch info")
        print("   6. ‚úÖ Added sampling failure handling with configurable limits")
        return 0
    else:
        print("üí• Some tests failed!")
        return 1

if __name__ == "__main__":
    exit(main())
